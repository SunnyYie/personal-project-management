generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id        String   @id @default(cuid())
  filename  String
  path      String?
  mimetype  String?
  size      Int
  createdAt DateTime @default(now())
}

model OperationLog {
  id        String   @id @default(cuid())
  userId    String?
  email     String?
  ip        String
  method    String
  path      String
  params    Json?
  userAgent String
  device    String?
  platform  String?
  status    Int
  response  Json?
  duration  Int
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  name           String
  avatar         String?
  role           Role             @default(USER)
  password       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  cognitoId      String?          @unique
  teamId         String?          @unique
  attachments    Attachment[]
  comments       Comment[]
  OperationLog   OperationLog[]
  assignedTasks  Task[]           @relation("TaskAssignee")
  authoredTasks  Task[]           @relation("TaskAuthor")
  taskAssignment TaskAssignment[]
  UserTeam       UserTeam[]
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Team {
  id                   String        @id @default(cuid())
  name                 String
  avatar               String?
  productOwnerUserId   String?
  projectManagerUserId String?
  createdAt            DateTime      @default(now())
  projectTeams         ProjectTeam[]
  UserTeam             UserTeam[]
}

model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  projectTeams ProjectTeam[]
  tasks        Task[]
}

model ProjectTeam {
  id        String   @id @default(cuid())
  teamId    String
  projectId String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
}

model Task {
  id             String           @id @default(cuid())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  endDate        DateTime?
  points         Int?
  projectId      String
  authorUserId   String
  assignedUserId String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  attachments    Attachment[]
  comments       Comment[]
  assignee       User?            @relation("TaskAssignee", fields: [assignedUserId], references: [id])
  author         User             @relation("TaskAuthor", fields: [authorUserId], references: [id])
  project        Project          @relation(fields: [projectId], references: [id])
  taskAssignment TaskAssignment[]
}

model TaskAssignment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Attachment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  filename  String
  fileURL   String?
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model UserTeam {
  id        String   @id
  userId    String
  teamId    String
  createdAt DateTime @default(now())
  Team      Team     @relation(fields: [teamId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
